// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.en');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Agregar un comentario";
Blockly.Msg.AUTH = "Por favor, autriza esta app para que poder salvar tu trabajo y compartirlo.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Cambiar valor:";
Blockly.Msg.CHAT = "Habla con tu colaborador/asesor escribiendo en este espacio!";
Blockly.Msg.COLLAPSE_ALL = "Minimizar bloques";
Blockly.Msg.COLLAPSE_BLOCK = "Minimizar bloque";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "color 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "color 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "proporci\u00F3n";
Blockly.Msg.COLOUR_BLEND_TITLE = "mezcla";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Mezcla dos colores en ciertas proporciones (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Escoge un color de la paleta.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "color aleatorio";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Escoge un color aleatoriamente.";
Blockly.Msg.COLOUR_RGB_BLUE = "azul";
Blockly.Msg.COLOUR_RGB_GREEN = "verde";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "rojo";
Blockly.Msg.COLOUR_RGB_TITLE = "colorear con";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Crea un color con proporciones espec\u00EDficas de rojo, verde y azul. Todos los valores deben estar entre 0 y 100."; 
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#Loop_Termination_Blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break;";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue;";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Salir del ciclo contenedor.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Saltar el resto de este ciclo y continuar con la siguiente iteraci\u00F3n";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Atenci\u00F3n: Este bloque solo puede usarse dentro de un bloque.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#for_each for each block";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "en la lista";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "para cada elemento";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Para cada elemento en una lista/arreglo, inicializa la variable '%1' para el elemento y ejecuta instrucciones en cada iteraci\u00F3n";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#count_with";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "=%1; VARIABLE <= %2; VARIABLE = VARIABLE + %3)";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "for(";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "La variable %1 toma los valores del n\u00FAmero de inicio al n\u00FAmero del fin, increment\u00E1ndose de acuerdo al valor especificado"; 
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Agrega condici\u00F3n al bloque 'si'.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Agrega una condici\u00F3n final que abarque a todo al bloque 'si'.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://code.google.com/p/blockly/wiki/If_Then";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Agrega, elimina o reordena secciones para reconfigurar el bloque";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "si no";
Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Si una condici\u00F3n se cumple, hace algo.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Si una condici\u00F3n se cumple, ejecuta el primer bloque de instrucciones.  Si no, ejecuta el segundo bloque de instrucciones.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Si una condici\u00F3n se cumple, ejecuta el primer bloque de instrucciones.  Si la segunda condici\u00F3n se cumple, ejecutar el segundo bloque de instrucciones.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Si una condici\u00F3n se cumple, ejecuta el primer bloque de instrucciones.  Si la segunda condici\u00F3n se cumple, ejecutar el segundo bloque de instrucciones.  Si niguna de las condiciones se cumple, ejecutar el \u00FAltimo bloqur de instrucciones.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO_2 = "";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repetira %1 veces";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "while???";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "veces";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Ejecutar instrucciones determinado n\u00FAmero de veces.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repetirv hasta que";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "while";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Mientras un valor sea falso, ejecutar instrucciones.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Mientras un valor sea verdadero, ejecutar instrucciones.";
Blockly.Msg.DELETE_BLOCK = "Borrar bloque";
Blockly.Msg.DELETE_X_BLOCKS = "Borrar %1 Bloques";
Blockly.Msg.DISABLE_BLOCK = "Inhahbilitar bloque";
Blockly.Msg.DUPLICATE_BLOCK = "Duplicar";
Blockly.Msg.ENABLE_BLOCK = "Habilitar bloque";
Blockly.Msg.EXPAND_ALL = "Expandir Bloques";
Blockly.Msg.EXPAND_BLOCK = "Expandir Bloque";
Blockly.Msg.EXTERNAL_INPUTS = "Entradas externas";
Blockly.Msg.HELP = "Ayuda";
Blockly.Msg.INLINE_INPUTS = "Entradas en la lÃ­nea";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://en.wikipedia.org/wiki/Linked_list#Empty_lists";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "Crear lista vac\u00EDa";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Regresa una lista de longitud 0, que no contiene ning\u00FAn valor.";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Agregar, quitar o reordenar secciones para reconfigurar esta lista de bloques";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "crear una lista con";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "A\u00F1adir un elemento a la lista.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Crear una lista con cualquier n\u00FAmero de elementos";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "primero";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# desde el fin";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "obtener";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "obtener y quitar";
Blockly.Msg.LISTS_GET_INDEX_LAST = "\u00FAltimo";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "aleatorio";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "quitar";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Regresa el primer elemento de la lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Regresa el elemento en la posici\u00F3n especificada de la lista.  #1 es el \u00FAltimo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Regresa el elemento en la posici\u00F3n especificada de la lista.  #1 es el primer elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Regresa el \u00FAltimo elemento de la lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Regresa un elemento aleatorio de la lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Borra y regresa el primer elemento de la lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Borra y regresa el elemento especificado en la posici\u00F3n en la lista.  #1 es el \u00FAltimo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Borra y regresa el elemento especificado en la posici\u00F3n en la lista.  #1 es el primer elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Borra y regresa el \u00FAltimo elemento de la lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Borra y regresa un elemento aleatorio de la lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Borra el primer elemento en una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Borra el elemento especificado en la posici\u00F3n en la lista.  #1 es el \u00FAltimo elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Borra el elemento especificado en la posici\u00F3n en la lista.  #1 es el primer elemento.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Borra el \u00FAltimo elemento de una lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Borra un elemento aleatorio de una lista.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "de # al final";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "hasta #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "el \u00FAltimo";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_a_sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "regresa una sub-lista del primero";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "regresa una sub-lista del fin";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "regresa una sub-lista de #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Crea una copia de la porci\u00F3n especificada de la lista.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "encuentra la primer ocurrencia del elemento";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_Items_from_a_List";
Blockly.Msg.LISTS_INDEX_OF_LAST = "encuentra la \u00FAltima ocurrencia del elemento";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list.  Returns 0 if text is not found.";
Blockly.Msg.LISTS_INLIST = "en la lista";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#is_empty";
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 est\u00E1 vac\u00EDo";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#length_of";
Blockly.Msg.LISTS_LENGTH_TITLE = "largo de %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Regresa el n\u00FAmero de elementos en la lista.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#create_list_with";
Blockly.Msg.LISTS_REPEAT_TITLE = "Crea una lista con el elemento %1 repetido %2 veces";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Crea una lista con el valor especificado el n\u00FAmero de veces especificado";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#in_list_..._set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "como";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insertar en";
Blockly.Msg.LISTS_SET_INDEX_SET = "inicializar";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserta un elemnto al inicio de la lista";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserta el elemento en la posici\u00F3n especificada de la lista.  #1 es el \u00FAltimo elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserta el elemento en la posici\u00F3n especificada de la lista.  #1 es el primer elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "A\u00F1ade el elemento al final de la lista";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserta el elemento aleatoriamente en la lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Establece el valor del primer elemento de la lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Establece el valor del elemento en la posiciÃ³n especificada en la lista.  #1 es el Ãºltimo elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Establece el valor del elemento en la posiciÃ³n especificada en la lista.  #1 es el primer elemento.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Establece el valor del Ãºltimo elemento en la lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Establece el valor de un elemento aleatorio en la lista.";
Blockly.Msg.LISTS_TOOLTIP = "Regresa verdadero si la lista estÃ¡ vacÃ­a.";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://code.google.com/p/blockly/wiki/True_False";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Puede regresar verdadero o falso.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Regresa verdadero si ambas entradas son iguales.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal a the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal a the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal a each other.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://en.wikipedia.org/wiki/Negation";
Blockly.Msg.LOGIC_NEGATE_TITLE = "! %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Regresa 'verdadero' si la entrada es 'falso'. Regresa 'falso' si la entrada es 'verdadero'.";
Blockly.Msg.LOGIC_NULL = "nulo";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Regresa nulo.";
Blockly.Msg.LOGIC_OPERATION_AND = "and";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://code.google.com/p/blockly/wiki/And_Or";
Blockly.Msg.LOGIC_OPERATION_OR = "or";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Regresa verdadero su ambas entradas son iguales.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Regresa verdadero si al menos una de las entradas en verdadera.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "prueba una condiciÃ³n";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "si la condiciÃ³n se cumple";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "si la condiciÃ³n no se cumple";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Operador ternario: Prueba una condiciÃ³n, y si se cumple, regresa el primer valor. Si no se cumple, regresa el segundo.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Regresa la suma de los dos nÃºmeros.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Regresa el cociente de los dos nÃºmeros.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Regresa la resta de los dos nÃºmeros.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Regresa el producto de los dos nÃºmeros.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Regresa el primer nÃºmero elevado a la potencia en el segundo nÃºmero.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_INPUT_BY = "por";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "cambiar";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "AÃ±adir un nÃºmero a la variable '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Regresa el valor de una constante comÃºn: Ï (3.141â¦), e (2.718â¦), Ï (1.618â¦), sqrt(2) (1.414â¦), sqrt(Â½) (0.707â¦), or â (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "Restringe debajo de %1 y mÃ¡s arriba de %2";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Restringr el valor de un nÃºmero a los valores especificados (inclusive ellos).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "/";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "es divisible entre";
Blockly.Msg.MATH_IS_EVEN = "es par";
Blockly.Msg.MATH_IS_NEGATIVE = "es negativo";
Blockly.Msg.MATH_IS_ODD = "es impar";
Blockly.Msg.MATH_IS_POSITIVE = "es positivo";
Blockly.Msg.MATH_IS_PRIME = "es primo";
Blockly.Msg.MATH_IS_TOOLTIP = "Revisa si un nÃºmero es par, impar, primo, entero, positivo, negativo, o si es divisible por cierto nÃºmero. Regresa verdadero o falso.";
Blockly.Msg.MATH_IS_WHOLE = "is entero";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "%1 \% %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Regresa el residuo de la divisi\u00F3n de dos n\u00FAmeros.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "*";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Un nÃºmero.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "promedio de una lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "mÃ¡ximo de una lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana de una lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "mÃ­nimo de una lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "moda de la lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "nÃºmero aleatorio de la lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "desviaciÃ³n estÃ¡ndar de la lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sumatoria de la lista";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Regresa el promedio (media aritmÃ©tica) de los valores numÃ©ricos en la lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Regresa el valor mÃ¡s grande en la lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Regresa el nÃºmero de media en la lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Regresa el valor mÃ¡s pequeÃ±o en la lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Regresa una lista con los valores mÃ¡s comunes en la lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Regresa un elemento aleatorio de la lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Regresa la desviaciÃ³n estÃ¡ndar de la lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Regresa la sumatoria de todos los elementos en la lista.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "fracciÃ³n aleatoria";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Regresa una fracciÃ³n aleatoria entre 0.0 (inclusive) y 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "NÃºmero aleatorio entre %1 y %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Regresa un nÃºmero aleatorio entre los lÃ­mites especificados, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "redondear";
Blockly.Msg.MATH_ROUND_OPERATOR_CEIL = "redondear hacia arriba";
Blockly.Msg.MATH_ROUND_OPERATOR_FLOOR = "redondear hacia abajo";
Blockly.Msg.MATH_ROUND_OPERATOR_TRUNC = "truncar";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Redondear un nÃºmero o truncarlo.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absoluto";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "raÃ­z cuadrada";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Regresa el valor absoluto de un nÃºmero (Con signo positivo).";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Regresa la potencia de un nÃºmero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG = "Regresa el logaritmo natural de un nÃºmero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Regresa el logaritmo base 10 de un nÃºmero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG2 = "Regresa el logaritmo base 2 de un nÃºmero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Regresa la negaciÃ³n de un nÃºmero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW = "Regresa la base de la potencia a la que estÃ¡ elevado un nÃºmero.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Regresa la raÃ­z cuadrada de un nÃºmero.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_LOG = "log";
Blockly.Msg.MATH_TRIG_LOG10 = "log10";
Blockly.Msg.MATH_TRIG_LOG2 = "log2";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Regresa el arcocoseno de un nÃºmero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Regresa el arcoseno de un nÃºmero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Regresa la the arcotangente de un nÃºmero.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Regresa el coseno de un grado (NO en radianes).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Regresa el seno de un grado (NO en radianes).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Regresa la tangente de un grado (NO en radianes).";
Blockly.Msg.ME = "Yo";
Blockly.Msg.NEW_VARIABLE = "Nueva variable...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Nombre de la nueva variable:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "permitir estatutos";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = ":";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Corre la funciÃ³n especificada por el usuario '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Corre la funciÃ³n especificada por el usuario '%1' y utiliza su salida.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "->";
Blockly.Msg.PROCEDURES_CREATE_DO = "Crea '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "procedimiento";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "void";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Crea una funci\u00F3n que no regresa nada";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Crea una funciÃ³n que regresa algo.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Cuidado!: Esta funciÃ³n tiene parÃ¡metros duplicados.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Sobresaltar la definiciÃ³n de una funciÃ³n";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Si un valor es verdadero, entonces regresar un segundo valor.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Cuidado!: Este bloque debe ser usado solo con la definiciÃ³n de una funciÃ³n.";
Blockly.Msg.PROCEDURES_MUTATORARG_PRETITLE='';
Blockly.Msg.PROCEDURES_MUTATORARG_ARRAY_PRETITLE='Arreglo';
Blockly.Msg.PROCEDURES_MUTATORARG_POINTER_PRETITLE='Apuntador';
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "AÃ±adir una entrada a la funciÃ³n.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "ParÃ¡metros";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "AÃ±ade, borra o reordena entradas en esta funciÃ³n.";
Blockly.Msg.REMOVE_COMMENT = "Borrar comentario";
Blockly.Msg.RENAME_VARIABLE = "Renombrar variable...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Renombra las variables de la funciÃ³n '%1' a:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "adjunta texto";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_APPEND_TO = "a";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Concatena un texto a la variable '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Adjusting_text_case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "a lower case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "a Title Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "a UPPER CASE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item a the text.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections a reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "a letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "a letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "a last letter";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_a_region_of_text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Finding_text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of first text in the second text.  Returns 0 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Checking_for_empty_text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Printing_text";
Blockly.Msg.TEXT_PRINT_TITLE = "imprime %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Imprime el texto, nÃºmero u otro valor especificado.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Getting_input_from_the_user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Pregunta al usuario por un nÃºmero.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Pregunta al usuario por un texto.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "Pregunta por un nÃºmero con un mensaje";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "Pregunta por un texto con un mensaje";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Una letra, palabra o l\u00EDnea de texto.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Trimming_%28removing%29_spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "ajusta espacios de ambos lados";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "austa espacios desde el lado izquierdo";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "ajusta espacios desde el lado derecho";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Regresa una copia del texto cn espacios removidos de uno o ambos extremos.";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "elemento";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Crea 'poner %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Get";
Blockly.Msg.VARIABLES_GET_TAIL = "";
Blockly.Msg.VARIABLES_GET_TITLE = "";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Regresa el valor de esta variable.";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Crea 'poner %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Set";
Blockly.Msg.VARIABLES_SET_TAIL = "=";
Blockly.Msg.VARIABLES_SET_TITLE = "";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Establece el valor de una variable igual al de entrada.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.VARIABLES_SET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.VARIABLES_GET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = '';
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = '';
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO_2 = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO_2;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.STDIO_PRINTF_TITLE = 'cout <<';
Blockly.Msg.STDIP_PRINTF_MUTATOR_PRINTFADD_TITLE = 'Add';
Blockly.Msg.STDIO_SCANF_TITLE = 'cin >>';
Blockly.Msg.STDIP_SCANF_MUTATOR_SCANFADD_TITLE = 'Add';
Blockly.Msg.STDIO_SCANF_TOOLTIP = '';
Blockly.Msg.STDIO_SCANF_HELPURL = 'https://en.wikipedia.org/wiki/Scanf_format_string';
Blockly.Msg.STDIO_NEWLINE_TITLE = 'nueva linea';
Blockly.Msg.STDIO_NEWLINE_TOOLTIP = 'carÃ¡cter de nueva lÃ­nea';
Blockly.Msg.STDIO_NEWLINE_HELPURL = 'https://en.wikipedia.org/wiki/Newline';
Blockly.Msg.COMMENT_TITLE = 'comentario';
Blockly.Msg.COMMENT_MUTATOR_COMMENTADD_TITLE = 'AÃ±adir';
Blockly.Msg.COMMENT_TOOLTIP = 'Un "comentario" es una secuencia de caracteres delimitada por una combinaciÃ³nn de diagonal/asterisco (/*...*/) que es ignorada por el compilador. Usa comentarios para documentar tu cÃ³digo.';
Blockly.Msg.STDLIB_CONVERT_TITLE = 'Convierte la cadena %1 a %2';
Blockly.Msg.STDLIB_CONVERT_INT = 'entero';
Blockly.Msg.STDLIB_CONVERT_DOUBLE = 'double';
Blockly.Msg.STDLIB_CONVERT_TOOLTIP = 'Convierte cadena a entero o double.';
Blockly.Msg.STDLIB_CONVERT_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STDLIB_RAND_TITLE = 'rand %1';
Blockly.Msg.STDLIB_RAND_TOOLTIP = 'asigna un nÃºmero entero';
Blockly.Msg.STDLIB_RAND_HELPURL = 'https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation';
Blockly.Msg.STDLIB_RANDSCOPE_TITLE = "scope:%1~%2";
Blockly.Msg.STDLIB_RANDSCOPE_TOOLTIP = 'assign scope of random number.';
Blockly.Msg.STDLIB_RANDSCOPE_HELPURL = 'https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation';
Blockly.Msg.STDLIB_SRAND_TITLE = 'srand %1'; // not use
Blockly.Msg.STDLIB_MALLOC_TITLE = 'malloc %1';
Blockly.Msg.STDLIB_MALLOC_TOOLTIP = 'Dinamic memory allocation';
Blockly.Msg.STDLIB_MALLOC_HELPURL = 'https://en.wikipedia.org/wiki/C_dynamic_memory_allocation';
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_TITLE = 'de tama\u00F1o %1';
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_TOOLTIP = 'regresar the size by byte';
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_HELPURL = 'https://en.wikipedia.org/wiki/Sizeof';
Blockly.Msg.STDLIB_ARITHFORMALLOC_TITLE = '%1 x %2';
Blockly.Msg.STDLIB_FREE_TITLE = 'free %1';
Blockly.Msg.STDLIB_FREE_TOOLTIP = 'deallocate the memory';
Blockly.Msg.STDLIB_FREE_HELPURL = 'https://en.wikipedia.org/wiki/C_dynamic_memory_allocation';
Blockly.Msg.STDLIB_EXIT_TITLE = 'exit %1';
Blockly.Msg.STDLIB_EXIT_SUCCESS = 'Ãxito';
Blockly.Msg.STDLIB_EXIT_FAILURE = 'Fracaso';
Blockly.Msg.STDLIB_EXIT_TOOLTIP = 'Salir.';
Blockly.Msg.STDLIB_EXIT_HELPURL = 'https://en.wikipedia.org/wiki/Exit_(system_call)';
Blockly.Msg.MATH_SIN_TITLE = 'sin %1'; // not use
Blockly.Msg.MATH_COS_TITLE = 'cos %1'; // not use
Blockly.Msg.MATH_TAN_TITLE = 'tan %1'; // not use
Blockly.Msg.MATH_POW_TITLE = 'elevar %1 ^ %2'; //'pow %1 ^ %2';
Blockly.Msg.MATH_EXP_TITLE = 'exp %1';
Blockly.Msg.MATH_SQRT_TITLE = 'sqrt %1';
Blockly.Msg.MATH_ABS_TITLE = 'valor absoluto %1'; // not use
Blockly.Msg.MATH_NUMCHECK_TITLE = '%1 es un %2 ?';
Blockly.Msg.MATH_NUMCHECK_ISFINITE = 'valor finito';
Blockly.Msg.MATH_NUMCHECK_ISINF = 'valor infinito';
Blockly.Msg.MATH_NUMCHECK_SIGNBIT = 'valor negativo';
Blockly.Msg.MATH_NUMCHECK_ISNAN = 'valor NaN';
Blockly.Msg.MATH_NUMCHECK_TOOLTIP = '';
Blockly.Msg.MATH_NUMCOMPARE_TITLE = '%1 es %3 que %2';
Blockly.Msg.MATH_NUMCOMPARE_ISGREATER = 'mayor';
Blockly.Msg.MATH_NUMCOMPARE_ISLESS = 'menor';
Blockly.Msg.MATH_NUMCOMPARE_ISGREQ = 'mayor o igual';
Blockly.Msg.MATH_NUMCOMPARE_ISLEEQ = 'menor o igual';
Blockly.Msg.MATH_NUMCOMPARE_ISLEGR = 'mayor o menor';
Blockly.Msg.MATH_NUMCOMPARE_ISUNORDER = 'desordenado';
Blockly.Msg.MATH_NUMCOMPARE_TOOLTIP = '';
Blockly.Msg.STRING_STRLEN_TITLE = 'strlen(%1)';
Blockly.Msg.STRING_STRLEN_TOOLTIP = 'Regresa el largo de la cadena';
Blockly.Msg.STRING_STRLEN_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STRING_STRCAT_TITLE = 'Concatena las cadenas %1 y %2';
Blockly.Msg.STRING_STRCAT_TOOLTIP = 'Concatena dos cadenas';
Blockly.Msg.STRING_STRCAT_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STRING_STRCPY_TITLE = 'Copia la cadena de %1 a %2';
Blockly.Msg.STRING_STRCPY_TOOLTIP = 'Copia la primera cadena en la segunda cadena';
Blockly.Msg.STRING_STRCPY_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STRING_STRCMP_TITLE = 'strcmp(%1, %2)';
Blockly.Msg.STRING_STRCMP_TOOLTIP = 'Compara dos cadenas';
Blockly.Msg.STRING_STRCMP_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';

Blockly.Msg.TIME_REQUIREDTIME_TITLE = 'time a hacer followings';
Blockly.Msg.TIME_REQRUIEDTIME_TALE = 'save in double variable %1';
Blockly.Msg.TIME_TIME_CURRENT_TITLE = 'print current time';

Blockly.Msg.VARIABLES_SET_DIST_VARIABLE = 'Variable';
Blockly.Msg.VARIABLES_SET_DIST_POINTER = 'Apuntador';
Blockly.Msg.VARIABLES_SET_DIST_ARRAY = 'Arreglo';
Blockly.Msg.VARIABLES_SET_POINTER_SPEC_ONE = '*';
Blockly.Msg.VARIABLES_SET_POINTER_SPEC_TWO = '**';
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_ONE = '[]';
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_TWO = '[][]';
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_THREE = '[][][]';
Blockly.Msg.VARIABLES_SET_TYPE_INT = 'int'; 
Blockly.Msg.VARIABLES_SET_TYPE_UNSIGNED_INT= 'unsigned int';
Blockly.Msg.VARIABLES_SET_TYPE_LONG= 'long long int';
Blockly.Msg.VARIABLES_SET_TYPE_FLOAT = 'float';
Blockly.Msg.VARIABLES_SET_TYPE_DOUBLE = 'double';
Blockly.Msg.VARIABLES_SET_TYPE_CHAR= 'char';
Blockly.Msg.VARIABLES_SET_ITERATION_NORMAL = '*';
Blockly.Msg.VARIABLES_SET_ITERATION_DOUBLE = '**';
Blockly.Msg.VARIABLES_SET_ITERATION_TRIPLE = '***';
Blockly.Msg.VARIABLES_DECLARE_TITLE = '';
Blockly.Msg.VARIABLES_DECLARE_NAME = '';
Blockly.Msg.VARIABLES_DECLARE_INIT = ' = ';
Blockly.Msg.VARIABLES_DECLARE_DEFAULT_NAME = 'miVariable';
Blockly.Msg.VARIABLES_POINTER_DECLARE_TITLE = 'apuntador';
Blockly.Msg.VARIABLES_POINTER_DECLARE_ITERATION = '';
Blockly.Msg.VARIABLES_POINTER_DECLARE_DEFAULT_NAME = 'miApuntador';
Blockly.Msg.VARIABLES_ARRAY_BRACKETS = '] [';
Blockly.Msg.VARIABLES_ARRAY_DECLARE_TITLE = '';
Blockly.Msg.VARIABLES_ARRAY_DECLARE_LENGTH = '[';
Blockly.Msg.VARIABLES_ARRAY_DECLARE_DEFAULT_NAME = 'miArreglo';
Blockly.Msg.VARIABLES_RETURN = 'regresar ';

Blockly.Msg.POINTER_GET_TITLE = "";
Blockly.Msg.ARRAY_GET_TITLE = "";

Blockly.Msg.FUNCTION_SET_TYPE_INT = 'Entero';
Blockly.Msg.FUNCTION_SET_TYPE_FLOAT = 'Flotante';
Blockly.Msg.FUNCTION_SET_TYPE_DOUBLE = 'Double';
Blockly.Msg.FUNCTION_SET_TYPE_LONG = 'Long';
Blockly.Msg.FUNCTION_SET_TYPE_LONGLONG = 'Long long';
Blockly.Msg.FUNCTION_SET_TYPE_SHORT = 'Short';
Blockly.Msg.FUNCTION_SET_TYPE_LONGDOUBLE = 'Long double';
Blockly.Msg.FUNCTION_SET_TYPE_CHAR = 'Char';

Blockly.Msg.DEFINE_DECLARE_TITLE = '#define';
Blockly.Msg.DEFINE_DECLARE_INIT = 'es';
Blockly.Msg.DEFINE_DECLARE_DEFAULT_NAME = 'myMacro';
Blockly.Msg.DEFINE_GET_TITLE = '';
Blockly.Msg.DEFINE_SET_TYPE_CONSTANT = 'constant';
Blockly.Msg.DEFINE_SET_TYPE_MACRO = 'macro';

Blockly.Msg.MAIN_BLOCK = 'int main';
Blockly.Msg.MAIN_BLOCK_RETURN = "return ";

Blockly.Msg.CONTROLS_SWITCH = 'switch ';
Blockly.Msg.CONTROLS_SWITCH_CASE = 'case';

Blockly.Msg.STRUCTURE_DEFINE_TITLE = 'estructura tipo nombre';
Blockly.Msg.STRUCTURE_DEFINE_NAME = 'miEstructura';
Blockly.Msg.STRUCTURE_MUTATORCONTAINER_TITLE = 'miembros';
Blockly.Msg.STRUCTURE_MUTATORMEM_VAR= 'tipo de la variable';
Blockly.Msg.STRUCTURE_MUTATORMEM_POINTER= 'tipo del apuntador';
Blockly.Msg.STRUCTURE_MUTATORMEM_ARRAY= 'tipo de la cadena';
Blockly.Msg.STRUCTURE_MUTATORARG_NAME = 'nombre';

Blockly.Msg.STRUCTURE_DECLARE_TITLE = 'tipo';
Blockly.Msg.STRUCTURE_DECLARE_TALE = 'nombre';
Blockly.Msg.STRUCTURE_DECLARE_NAME = 'miEstructura1';

Blockly.Msg.STRUCTURE_SET_NAME = 'nombre';
Blockly.Msg.STRUCTURE_SET_MEMBER = 'miembro';

Blockly.Msg.STRUCTURE_GET_NAME = 'nombre';
Blockly.Msg.STRUCTURE_GET_MEMBER = 'miembro';

Blockly.Msg.UNION_DEFINE_NAME = 'myUnion';

Blockly.Msg.PROCEDURES_RETURN_TITLE = 'terminar la funci\u00F3n antes de regresar ';
Blockly.Msg.PROCEDURES_RETURN_TOOLTIP = 'Sale de la funci\u00F3n antes de regresar lo que quieres regresar. Puedes usarla en cualquier parte';
Blockly.Msg.PLZ_OUT_OF_BLOCK = 'Warning: This block can be placed out of other blocks except function block.';
Blockly.Msg.PLZ_INSIDE_FUNCTION = 'Cuidado!: Coloque este bloque dentro de una funciÃ³n';
Blockly.Msg.PLZ_OUT_OF_FUNCTION = 'Cuidado!: Coloque este bloque fuera de una funciÃ³n.';
Blockly.Msg.SELECT_MENU = '--Seleccionar--';
Blockly.Msg.SELECT_TYPE = '--Tipo--';

Blockly.Msg.TAG_DEFINE_DECLARE = ['macro', 'constant'];
Blockly.Msg.TAG_DEFINE_GET = ['macro', 'constant', 'get'];
Blockly.Msg.TAG_VARIABLE_DECLARE = ['variables', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_SET = ['variables', 'assignment', 'poner'];
Blockly.Msg.TAG_VARIABLE_GET = ['variables', 'get'];
Blockly.Msg.TAG_VARIABLE_POINTER_DECLARE = ['apuntador', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_POINTER_SET = ['apuntador', 'assignment', 'poner'];
Blockly.Msg.TAG_VARIABLE_POINTER_GET = ['apuntador', 'get'];
Blockly.Msg.TAG_VARIABLE_POINTER_ADDR = ['&', 'address'];
Blockly.Msg.TAG_VARIABLE_POINTER_ASTR = ['*', 'asterisk'];
Blockly.Msg.TAG_VARIABLE_ARRAY_DECLARE = ['array', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_ARRAY_SET = ['array', 'assignment', 'poner'];
Blockly.Msg.TAG_VARIABLE_ARRAY_GET = ['array', 'get'];

Blockly.Msg.TAG_STRUCTURE_DEFINE = ['estructura', 'typedef', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_STRUCTURE_DECLARE = ['estructura', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_STRUCTURE_GET = ['estructura', 'get'];
Blockly.Msg.TAG_STRUCTURE_SET = ['estructura', 'assignment', 'poner'];

Blockly.Msg.TAG_LOGIC_IF = ['if', 'if else', 'ifelse'];
Blockly.Msg.TAG_LOGIC_COMPARE = ['compare'];
Blockly.Msg.TAG_LOGIC_OPERATION = ['operation', 'y', 'or'];
Blockly.Msg.TAG_LOGIC_NEGATE = ['!', 'negate'];
Blockly.Msg.TAG_LOGIC_BOOLEAN = ['boolean', 'true', 'false'];
Blockly.Msg.TAG_LOGIC_NULL = ['null', 'null character'];
Blockly.Msg.TAG_LOGIC_TERNARY = ['?'];
Blockly.Msg.TAG_LOGIC_SWITCH = ['Switch', 'caso'];

Blockly.Msg.TAG_LOOP_WHILE = ['while', 'ciclo'];
Blockly.Msg.TAG_LOOP_FOR = ['for', 'ciclo'];
Blockly.Msg.TAG_LOOP_FLOW = ['salir', 'continue'];

Blockly.Msg.TAG_PROCEDURE_DEFNORETURN = ['void', 'function'];
Blockly.Msg.TAG_PROCEDURE_DEFRETURN = ['function'];

Blockly.Msg.TAG_MATH_NUMBER = ['number'];
Blockly.Msg.TAG_MATH_ARITHMETIC = ['number', 'arithmetic', 'additionsubtractionmultiplicationdivision', '+-*/'];
Blockly.Msg.TAG_MATH_MODULO = ['arithmetic', 'remainder', '%'];

Blockly.Msg.TAG_STDIO_PRINTF = ['stdio.h', 'printf()', 'output', 'out'];
Blockly.Msg.TAG_STDIO_TEXT = ['stdio.h', 'text'];
Blockly.Msg.TAG_STDIO_NEWLINE = ['stdio.h', 'newline', 'nueva linea', '\n', 'cambiar l\u00EDnea', 'l\u00EDnea cambiar'];
Blockly.Msg.TAG_STDIO_SCANF = ['stdio.h', 'scanf()', 'input'];

Blockly.Msg.TAG_COMMENT = ['comment', 'Comment', '\/\/', '\/**\/'];

Blockly.Msg.TAG_STDLIB_CONVERT = ['stdlib.h', 'convert', 'atoi()', 'atof()'];
Blockly.Msg.TAG_STDLIB_RAND = ['stdlib.h', 'random number'];
Blockly.Msg.TAG_STDLIB_MALLOC = ['stdlib.h', 'malloc()', 'memory allocation', 'memory allocate'];
Blockly.Msg.TAG_STDLIB_SIZEOF = ['stdlib.h', 'sizeof()', 'de tama\u00F1o', 'sizeOf'];
Blockly.Msg.TAG_STDLIB_FREE = ['stdlib.h', 'free()'];
Blockly.Msg.TAG_STDLIB_EXIT = ['stdlib.h', 'exit(0)', 'exit(1)', 'end', 'the end'];

Blockly.Msg.TAG_STRING_STRLEN = ['string.h', 'strlen()', 'string length', 'length of string'];
Blockly.Msg.TAG_STRING_STRCAT = ['string.h', 'strcat()', 'string concatenate', 'concatenate string'];
Blockly.Msg.TAG_STRING_STRCPY = ['string.h', 'strcpy()', 'string copy', 'copy string'];
Blockly.Msg.TAG_STRING_STRCMP = ['string.h', 'strcmp()', 'string compare', 'compare string'];

Blockly.Msg.TAG_MATH_ABS = ['math.h', 'absolute value'];
Blockly.Msg.TAG_MATH_TRIG = ['math.h', 'trigonometric function', 'sin()', 'cos()', 'tan()', 'sine function', 'cosine function', 'tangent function'];
Blockly.Msg.TAG_MATH_LOGS = ['math.h', 'log()', 'loge()', 'log10()', 'log2()', 'log e'];
Blockly.Msg.TAG_MATH_POW = ['math.h', 'power', 'pow()'];
Blockly.Msg.TAG_MATH_EXP = ['math.h', 'exponential function', 'exp()'];
Blockly.Msg.TAG_MATH_SQRT = ['math.h', 'sqrt()', 'square root'];
Blockly.Msg.TAG_MATH_ROUND = ['math.h', 'round up', 'round down', 'round()', 'trunc()', 'ceil()', 'floor()', 'truncate'];
Blockly.Msg.TAG_MATH_NUMCHECK = ['math.h', 'two number check'];
Blockly.Msg.TAG_MATH_NUMCOMPARE = ['math.h', 'two number compare'];

Blockly.Msg.TAG_TIME_CURRENT = ['time.h', 'get current time', 'print current time'];
Blockly.Msg.TAG_TIME_REQUIREDTIME = ['time.h', 'the time a hacer followings'];

Blockly.Msg.PROCEDURES_ILLEGALNAME = 'El nombre de la funciÃ³n es ilegal';
Blockly.Msg.VARIABLES_ILLEGALNAME = 'El nombre de la variable es ilegal';
Blockly.Msg.STRUCTURE_ILLEGALNAME = 'El nombre de la estructura es ilegal';

Blockly.Msg.CONTROLS_SWITCH_BREAK_WARNING = "CUIDADO: Este bloque debe ir dentro de un switch";
Blockly.Msg.CONTROLS_SWITCH_BREAK = 'break;';
Blockly.Msg.CONTROLS_SWITCH_BREAK_TOOLTIP = 'salir del bloque de instrucciones.';
Blockly.Msg.CONTROLS_SWITCH_DEFAULT = 'default';
Blockly.Msg.CONTROLS_SWITCH_DO = "";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP1 = "si no hay un valor correspondiente, hacer la instrucci\u00F3n del primer bloque, y si el valor corresponde con el segundo valor, hacer la instrucci\u00F3n del segundo bloque.";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP2 = "si no hay un valor correspondiente, hacer la instrucci\u00F3n del primer bloque, si el valor corresponde con el segundo valor, hacer la instrucci\u00F3n del segundo bloque, y si el valor corresponde con el tercer valor, hacer la instrucci\u00F3n del tercer bloque.";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP3 = "si no hay un valor correspondiente, hacer la instrucci\u00F3n del primer bloque y si el valor corresponde con el segundo valor, hacer la instrucci\u00F3n del segundo bloque, .... , y si el valor corresponde con el \u00FAltimo valor, hacer el \u00FAltimo bloque de instrucciones";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP4 = "si no hay un valor correspondiente, hacer la instrucci\u00F3n del primer bloque y si el valor corresponde con el segundo valor, hacer la instrucci\u00F3n del segundo bloque, .... , y si el valor corresponde con el \u00FAltimo valor, hacer el \u00FAltimo bloque de instrucciones";
Blockly.Msg.CONTROLS_SWITCH_CASE_TOOLTIP = "Add case.";

Blockly.Msg.MAINPROCEDURES_TOOLTIP = "BÃ¡sicamente, bloque de funciÃ³n principla. regresar un valor entero";

Blockly.Msg.STRUCTURE_DEFINE_TOOPTIP = "define estructura. you can add, delete, rename the member of estructura. it must be before using estructura.";
Blockly.Msg.STRUCTURE_DECLARE_TOOPTIP = "declare estructura by selecting predefined estructura(similar with declaring variables). it must be before using estructura.";
Blockly.Msg.STRUCTURE_GET_TOOLTIP = "regresar value of estructura member or estructura itself.";
Blockly.Msg.STRUCTURE_SET_TOOLTIP = "assignment(poner) the value into estructura member or estructura itself.";
Blockly.Msg.STRUCTURE_MUTATORCONTAINER_TOOLTIP = "add, delete, or rearrange member.";
Blockly.Msg.STRUCTURE_MUTATORARG_TOOLTIP = "add member of estructura.";

Blockly.Msg.TIME_CURRENT_TOOLTIP = "print current time with the form \"0000(year)-00(month)-00(day)-00(hour)-00(miniute)-00(seconds)\"";
Blockly.Msg.TIME_REQUIREDTIME_TOOLTIP = "save the time that is taken for doing followings into double variable";

Blockly.Msg.VARIABLES_DECLARE_TOOLTIP = "Declara una variable";

Blockly.Msg.TAG_MATH_CONVERT_TYPE = ['(type)'];
Blockly.Msg.MATH_CONVERT_TYPE_TOOLTIP = "Operador de conversiÃ³n que convierte a un tipo especial";

Blockly.Msg.TAG_STDIO_TAB = ['stdio.h', 'tab', '\t'];
Blockly.Msg.STDIO_TAB_TITLE="Tabulador";
Blockly.Msg.STDIO_TAB_TOOLTIP="Tecla tabulador (TAB)";
Blockly.Msg.VARIABLES_ARRAY_POINTER_TOOLTIP="Apuntador del nombre del arreglo";

Blockly.Msg.MATH_INCREMENT_OP="++";
Blockly.Msg.MATH_DECREMENT_OP="--";
Blockly.Msg.TAG_MATH_PREV_INC_DECREMENT= ['number', 'previous increment/decrement', '++', '--'];
Blockly.Msg.MATH_PREV_INC_DECREMENT_TOOLTIP="ExpresiÃ³n de incremento/decremento PREVIO (Suma/Resta 1 a la variable antes de usarse)";
Blockly.Msg.TAG_MATH_POST_INC_DECREMENT= ['number', 'post increment/decrement', '++', '--'];
Blockly.Msg.MATH_POST_INC_DECREMENT_TOOLTIP="ExpresiÃ³n de incremento/decremento POSTERIOR (Suma/Resta 1 a la variable despuÃ©s de usarse)";
Blockly.Msg.MATH_INCREMENT_EXPRESSION_TITLE="%1 ++";
Blockly.Msg.MATH_INCREMENT_EXPRESSION_TOOLTIP="ExpresiÃ³n de incremento (Suma 1 a la variable)";
Blockly.Msg.TAG_MATH_INCREMENT_EXPRESSION=['number', 'increment expression', '++'];
Blockly.Msg.MATH_DECREMENT_EXPRESSION_TITLE="%1 --";
Blockly.Msg.MATH_DECREMENT_EXPRESSION_TOOLTIP="ExpresiÃ³n de decremento (Resta 1 a la variable)";
Blockly.Msg.TAG_MATH_DECREMENT_EXPRESSION=['number', 'decrement expression', '++'];

Blockly.Msg.TAG_MATH_AUTO_CONVERT_TYPE= ['conversiones automÃ¡ticas'];
Blockly.Msg.MATH_AUTO_CONVERT_TYPE_TOOLTIP="conversiones aritmÃ©ticas y de asignaciÃ³n";

Blockly.Msg.TAG_VARIABLES_STRING_NULL = ['nulo', 'termina en valor nulo'];
Blockly.Msg.VARIABLES_STRING_NULL = "\'\\0\'";
Blockly.Msg.VARIABLES_STRING_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.VARIABLES_STRING_NULL_TOOLTIP = "Regresa una cadena de caracteres que termina con un valor nulo.";
Blockly.Msg.VARIABLES_STRING_DECLARE_DEFAULT_NAME="miCadena";
Blockly.Msg.VARIABLES_STRING_DECLARE_TITLE="";
Blockly.Msg.VARIABLES_STRING_DECLARE_LENGTH='[';
Blockly.Msg.VARIABLES_STRING_DECLARE_VALUE="] = ";

Blockly.Msg.VARIABLES_ARRAY_DECLARE_VALUE="]";
Blockly.Msg.VARIABLES_ARRAY_INITIAL="inicializaciÃ³n de una lista";
Blockly.Msg.VARIABLES_ARRAY_INITIAL_WARNING="El tamaÃ±o declarado del arreglo es menor que el nÃºmero de obetos!";
Blockly.Msg.VARIABLES_ARRAY_INITIAL_TOOLTIP="InicializaciÃ³n de un arreglo de listas cerradas (con elementos definidos)";
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TITLE_ADD="list";
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TOOLTIP="Add, remove, or reorder sections to reconfigure this array";
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TITLE="value";
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TOOLTIP="element value";

Blockly.Msg.TEXT_CHAR='http://arduino.cc/en/Reference/char';
Blockly.Msg.TEXT_CHAR_TOOLTIP='Un tipo de dato que ocupa 1 byte de memoria que guarda el valor de un carÃ¡cter. Las letras que representan caracteres deben estar escritos con comillas simples.';
Blockly.Msg.TEXT_CHAR_WARNING="Guarda el valor de un carÃ¡cter o de un carÃ¡cter de escape.";
